/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, University of Konstanz and Brian Northan.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.math;

import net.imagej.ops.AbstractBinaryFunctionOp;
import net.imagej.ops.AbstractFunctionOp;
import net.imagej.ops.Ops;

import org.scijava.plugin.Plugin;

/**
 * Generated arithmetic ops with primitive types.
 *
 * @author Curtis Rueden
 */
public final class PrimitiveMath {

	private PrimitiveMath() {
		// NB: Prevent instantiation of utility class.
	}
#foreach ($type in $types)
#foreach ($op in $ops)
#if ($op.codes.contains($type.code))
#set ($iface = "Ops.Math.$op.name")
#if ($op.unary)
	/** Op that $op.verbs a $type.name value. */
	@Plugin(type = ${iface}.class#if ($type.priority), priority = $type.priority#end)
	public static class $type.name$op.name extends AbstractFunctionOp<${type.name}, ${type.name}>
		implements $iface
	{

		@Override
		public ${type.name} compute(final ${type.name} a) {
#if ($op.operator)
			return ${op.operator}a;
#elseif ($op.function == "Math.round")
			return (${type.primitive}) ${op.function}(a);
#else
			return ${op.function}(a);
#end
		}
	}
#else
	/** Op that $op.verbs two $type.name values. */
	@Plugin(type = ${iface}.class#if ($type.priority), priority = $type.priority#end)
	public static class $type.name$op.name
		extends AbstractBinaryFunctionOp<${type.name}, ${type.name}, ${type.name}> implements $iface
	{

		@Override
		public ${type.name} compute2(final ${type.name} a, final ${type.name} b) {
#if ($op.operator)
			return a $op.operator b;
#else
			return ${op.function}(a, b);
#end
		}
	}
#end
#end
#end
#end

}
